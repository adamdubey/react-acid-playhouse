orbs:
  slack: circleci/slack@4.4.4
version: 2.1
executors:
  app-executor:
    docker:
      - image: cimg/node:16.7.0
    working_directory: ~/repo
  
  slack-executor:
    docker:
      - image: cimg/base:stable
    resource_class: small
  
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

aliases:
  - &show-current-branch-name
    run:
      name: Show Current Branch
      command: echo ${CIRCLE_BRANCH}
  
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-

  - &install-dependencies
    run:
      name: Install Dependencies
      command: |
        mkdir -p artifacts
        npm install
  
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}

  - &install-aws-cli
    run:
      name: Install AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python3-pip python3-dev build-essential

  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build/
        zip ../build.zip -r * .[^.]*
        echo "Build Successful!"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy TF directory
          command: |
            cp -r tf/ artifacts/tf
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  
  linter:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run Linting
          command:
            npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run Prettier Check
          command:
            npm run prettier:check
  
  unit-test:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run Unit Tests
          command: npm run test
  
  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Validate & Format
          command: |
              cd tf/
              terraform init -backend=false
              terraform validate
              terraform fmt -check
  
  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
              cd artifacts/tf/
              terraform init
              terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
              terraform plan
      - run:
          name: Terraform Apply
          command: |
              cd artifacts/tf/
              terraform workspace select ${CIRCLE_BRANCH}
              terraform apply --auto-approve
              terraform output acidplayhouse_app_bucket_name > ../acidplayhouse_app_bucket_name.txt
              terraform output cloudfront_distribution_id > ../cloudfront_distribution_id.txt
      - persist_to_workspace:
          root: ./
          paths:
              - artifacts

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3 
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/acidplayhouse_app_bucket_name.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS CloudFront
          command: |
            CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_distribution_id.txt | sed 's/\"//g')
            echo $CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            fi

  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "Slack Notification"
      - slack/notify:
          event: 'always'
          channel: 'aws-iot-dev'
          template: ''
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch deployment to AWS S3 and CloudFront is complete! üëç",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*:\n$(date + '%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Click to View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd tf/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
      - build
      - linter:
          requires:
            - build
          filters:
            branches:
              only:
                - dev
                - staging
                - main
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - dev
                - staging
                - main
      - unit-test:
          requires:
            - linting
            - prettier
          filters:
            branches:
              - dev
              - staging
              - main
      - terraform-validate:
          requires:
            - prettier
            - linter
          filters:
            branches:
              only:
                - dev
                - staging
                - main
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - dev
                - staging
                - main
      - deploy-to-aws-s3:
          requires:
            - unit-test
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - dev
                - staging
                - main
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - dev
                - staging
                - main
      - notify-via-slack:
          requires:
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - dev
                - staging
                - main
      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - dev
                - staging
                - main
